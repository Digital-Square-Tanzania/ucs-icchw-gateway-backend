generator client {
  provider        = "prisma-client-js"
  seed            = "(function)"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  avatar           String?
  status           UserStatus         @default(ACTIVE)
  createdAt        DateTime           @default(now()) @map("created_at")
  deletedAt        DateTime?          @map("deleted_at")
  firstName        String             @map("first_name")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  joinDate         DateTime           @default(now()) @map("join_date")
  lastName         String             @map("last_name")
  middleName       String?            @map("middle_name")
  phoneNumber      String?            @unique @map("phone_number")
  roleId           Int                @map("role_id")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  lastLogin        DateTime?          @map("last_login")
  BlacklistedToken BlacklistedToken[]
  UserToken        UserToken?
  role             Role               @relation(fields: [roleId], references: [id])

  @@index([email])
  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleType @unique
  description String
  users       User[]

  @@map("roles")
}

model UserToken {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  resetToken  String?  @map("reset_token")
  userId      String   @unique @map("user_id")
  verifyToken String?  @map("verify_token")
  user        User     @relation(fields: [userId], references: [id])

  @@index([resetToken])
  @@index([verifyToken])
  @@map("user_tokens")
}

model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("blacklisted_tokens")
}

model RequestLog {
  id        String   @id @default(uuid())
  ip        String
  path      String
  method    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("request_logs")
}

enum RoleType {
  UCS_DEVELOPER
  MOH_ADMIN
  COUNCIL_COORDINATOR
  EXTERNAL_SYSTEM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model OpenMRSLocation {
  location_id Int       @id @default(autoincrement())
  name        String
  description String?
  latitude    String?
  longitude   String?
  retired     Boolean   @default(false)
  uuid        String    @unique
  parent      String?
  type        String?
  attributes  Json?     @db.JsonB
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([attributes], type: Gin)
  @@map("openmrs_location")
}

model OpenMRSLocationTag {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("openmrs_location_tags")
}

model OpenMRSLocationAttributeType {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  name        String
  description String?
  dataType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("openmrs_location_attribute_types")
}

view OpenMRSLocationHierarchyView {
  index    Int     @id @map("index")
  uuid     String  @map("uuid")
  country  String? @map("country")
  zone     String? @map("zone")
  region   String? @map("region")
  district String? @map("district")
  council  String? @map("council")
  ward     String? @map("ward")
  name     String  @map("name")
  type     String  @map("type")

  @@map("openmrs_location_hierarchy_view") // Maps to the materialized view
}

model OpenMRSTeamRole {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  identifier String   @unique
  display    String
  name       String
  members    Int      @default(0)
  creator    Json
  createdAt  DateTime @default(now())

  @@map("openmrs_team_roles")
}

model OpenMRSTeam {
  id   Int    @id @default(autoincrement())
  uuid String @unique
  name String

  @@map("openmrs_teams")
}

model OpenMRSMemberRole {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  name        String
  display     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("openmrs_member_roles")
}

model OpenMRSTeamMember {
  id                  String   @id @default(uuid())
  identifier          String   @unique
  firstName           String
  middleName          String?
  lastName            String
  username            String   @unique
  personUuid          String
  userUuid            String?  @unique
  openMrsUuid         String   @unique
  teamUuid            String?
  teamName            String?
  teamIdentifier      String?
  locationUuid        String?
  locationName        String?
  locationDescription String?
  roleUuid            String?
  roleName            String?
  createdAt           DateTime
  updatedAt           DateTime @updatedAt

  @@map("openmrs_team_members")
}

model DHIS2OrgUnit {
  id          String   @id @default(uuid())
  uuid        String   @unique
  name        String
  code        String?  @unique
  level       Int
  latitude    Float?
  longitude   Float?
  parentUuid  String?
  parentName  String?
  parentLevel Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("dhis2_org_units")
}

model DHIS2Role {
  id        String   @id @default(uuid())
  uuid      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dhis2_roles")
}

model DHIS2User {
  id           String   @id @default(uuid())
  uuid         String   @unique
  username     String   @unique
  firstName    String?
  lastName     String?
  email        String?
  phoneNumber  String?
  disabled     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orgUnitUuids Json
  roleUuids    Json

  @@map("dhis2_users")
}

model SyncLog {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  entityType String   @map("entity_type")
  entityUuid String?  @map("entity_uuid")
  action     String
  status     String
  details    Json?
  createdAt  DateTime @default(now())

  @@map("sync_logs")
}
